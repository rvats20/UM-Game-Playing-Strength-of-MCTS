{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":70089,"databundleVersionId":9515283,"sourceType":"competition"}],"dockerImageVersionId":30762,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-26T17:10:11.484734Z","iopub.execute_input":"2024-11-26T17:10:11.484992Z","iopub.status.idle":"2024-11-26T17:10:11.813781Z","shell.execute_reply.started":"2024-11-26T17:10:11.484965Z","shell.execute_reply":"2024-11-26T17:10:11.812717Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport polars as pl\nimport pandas as pd\nfrom pathlib import Path\n\nimport gc\nimport os\nimport sys\n\nfrom tqdm import tqdm\nfrom IPython.display import clear_output\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport kaggle_evaluation.mcts_inference_server\nimport mcts_inference_server\npd.options.display.max_columns = None\n\nimport lightgbm as lgb\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import VotingRegressor\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom tqdm import tqdm\nimport optuna","metadata":{"execution":{"iopub.status.busy":"2024-11-26T17:10:11.815570Z","iopub.execute_input":"2024-11-26T17:10:11.816056Z","iopub.status.idle":"2024-11-26T17:10:17.958867Z","shell.execute_reply.started":"2024-11-26T17:10:11.816016Z","shell.execute_reply":"2024-11-26T17:10:17.958159Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load Data\ntrain = pl.read_csv('/kaggle/input/um-game-playing-strength-of-mcts-variants/train.csv')\ntest = pl.read_csv('/kaggle/input/um-game-playing-strength-of-mcts-variants/test.csv')\n\ngroup_col = train['GameRulesetName']","metadata":{"execution":{"iopub.status.busy":"2024-11-26T17:10:17.959974Z","iopub.execute_input":"2024-11-26T17:10:17.960953Z","iopub.status.idle":"2024-11-26T17:10:24.666092Z","shell.execute_reply.started":"2024-11-26T17:10:17.960910Z","shell.execute_reply":"2024-11-26T17:10:24.665425Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def select_features(df, features):\n    available_features = [feature for feature in features if feature in df.columns]\n    return df.select(available_features)\n\nfeatures = ['agent1', 'agent2','NumPlayableSitesOnBoard','NumColumns','NumRows','NumCorners','NumDirections','NumOrthogonalDirections','NumOuterSites','NumInnerSites','NumLayers','NumEdges','NumCells','NumVertices','NumPerimeterSites','NumTopSites','NumBottomSites','NumCentreSites','NumConvexCorners','NumPhasesBoard','NumPlayableSites','NumComponentsType','NumComponentsTypePerPlayer','PassDecisionFrequency','AddDecisionFrequency','RemoveEffectFrequency','SetNextPlayerFrequency','MoveAgainFrequency','DrawFrequency','Misere','DurationActions','DurationMoves','DurationTurns','DurationTurnsStdDev','DurationTurnsNotTimeouts','DecisionMoves','GameTreeComplexity','StateTreeComplexity','BoardCoverageDefault','BoardCoverageFull','BoardCoverageUsed','AdvantageP1','Balance','Completion','OutcomeUniformity','BoardSitesOccupiedAverage','BoardSitesOccupiedMedian','BoardSitesOccupiedMaximum','BoardSitesOccupiedVariance','BoardSitesOccupiedChangeAverage','BoardSitesOccupiedChangeSign','BoardSitesOccupiedChangeLineBestFit','BoardSitesOccupiedMaxIncrease','BranchingFactorAverage','BranchingFactorMedian','BranchingFactorMaximum','BranchingFactorVariance','BranchingFactorChangeAverage','BranchingFactorChangeSign','BranchingFactorChangeLineBestFit','BranchingFactorChangeMaxIncrease','BranchingFactorChangeMaxDecrease','DecisionFactorAverage','DecisionFactorMedian','DecisionFactorMaximum','DecisionFactorVariance','DecisionFactorChangeAverage','DecisionFactorChangeSign','DecisionFactorChangeLineBestFit','DecisionFactorMaxIncrease','DecisionFactorMaxDecrease','PieceNumberAverage','PieceNumberMedian','PieceNumberMaximum','PieceNumberVariance','PieceNumberChangeAverage','PieceNumberChangeSign','PieceNumberChangeLineBestFit','PieceNumberMaxIncrease','PlayoutsPerSecond','MovesPerSecond','utility_agent1']\n\n\ntrain = select_features(train, features)","metadata":{"execution":{"iopub.status.busy":"2024-11-26T17:10:24.668514Z","iopub.execute_input":"2024-11-26T17:10:24.669134Z","iopub.status.idle":"2024-11-26T17:10:24.797030Z","shell.execute_reply.started":"2024-11-26T17:10:24.669094Z","shell.execute_reply":"2024-11-26T17:10:24.796147Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"agent_cols = ['agent1', 'agent2']\n\ndef process_agent_cols(df, agent_cols):\n\n    for col in agent_cols:\n        split_cols = df[col].str.split(by=\"-\").to_list()\n        max_splits = max(len(lst) for lst in split_cols)\n        \n        for idx in range(max_splits):\n            new_col_name = f\"{col}_{idx}\"\n            df = df.with_columns(\n                pl.DataFrame({new_col_name: [lst[idx] if idx < len(lst) else None for lst in split_cols]})\n            )\n\n        df = df.drop(col)\n        \n    df = df.with_columns(\n        [pl.col(col).cast(pl.Categorical) for col in df.columns if any(col.startswith(agent) for agent in agent_cols)]\n    )\n    \n    df = df.with_columns(\n        [pl.col(col).cast(pl.Float32) for col in df.columns if not any(col.startswith(agent) for agent in agent_cols)]\n    )\n    \n    return df.to_pandas()\n\ntrain = process_agent_cols(train, agent_cols)","metadata":{"execution":{"iopub.status.busy":"2024-11-26T17:10:24.798243Z","iopub.execute_input":"2024-11-26T17:10:24.798918Z","iopub.status.idle":"2024-11-26T17:10:27.122287Z","shell.execute_reply.started":"2024-11-26T17:10:24.798878Z","shell.execute_reply":"2024-11-26T17:10:27.121575Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def encode_Train(df):\n    df['agent1_0'] = df['agent1_0'].map({'MCTS': 0}).astype(int)\n    df['agent1_1'] = df['agent1_1'].map({'UCB1Tuned': 0, 'UCB1GRAVE': 1, 'UCB1': 3, 'ProgressiveHistory': 4}).astype(int)\n    df['agent1_2'] = df['agent1_2'].map({'0.1': 0, '0.6': 1, '1.41421356237': 2}).astype(int)\n    df['agent1_3'] = df['agent1_3'].map({'Random200': 0, 'MAST': 1, 'NST': 3}).astype(int)\n    df['agent1_4'] = df['agent1_4'].map({'false': 0, 'true': 1}).astype(int)\n    \n    df['agent2_0'] = df['agent2_0'].map({'MCTS': 0}).astype(int)\n    df['agent2_1'] = df['agent2_1'].map({'UCB1Tuned': 0, 'UCB1GRAVE': 1, 'UCB1': 3, 'ProgressiveHistory': 4}).astype(int)\n    df['agent2_2'] = df['agent2_2'].map({'0.1': 0, '0.6': 1, '1.41421356237': 2}).astype(int)\n    df['agent2_3'] = df['agent2_3'].map({'Random200': 0, 'MAST': 1, 'NST': 3}).astype(int)\n    df['agent2_4'] = df['agent2_4'].map({'false': 0, 'true': 1}).astype(int)\n    \n    return df \n\ndef encode_Test(df):\n    df['agent1_0'] = df['agent1_0'].map({'MCTS': 0}).astype(int)\n    df['agent1_1'] = df['agent1_1'].map({'UCB1Tuned': 0, 'UCB1': 3, 'ProgressiveHistory': 4}).astype(int)\n    df['agent1_2'] = df['agent1_2'].map({'0.1': 0, '0.6': 1}).astype(int)\n    df['agent1_3'] = df['agent1_3'].map({'Random200': 0, 'MAST': 1, 'NST': 3}).astype(int)\n    df['agent1_4'] = df['agent1_4'].map({'false': 0, 'true': 1}).astype(int)\n    \n    df['agent2_0'] = df['agent2_0'].map({'MCTS': 0}).astype(int)\n    df['agent2_1'] = df['agent2_1'].map({'UCB1': 3, 'ProgressiveHistory': 4}).astype(int)\n    df['agent2_2'] = df['agent2_2'].map({\"0.1\": 0, \"0.6\": 1}).astype(int)\n    df['agent2_3'] = df['agent2_3'].map({'MAST': 1, 'NST': 3}).astype(int)\n    df['agent2_4'] = df['agent2_4'].map({'false': 0, 'true': 1}).astype(int)\n    \n    return df \n\ntrain = encode_Train(train)","metadata":{"execution":{"iopub.status.busy":"2024-11-26T17:10:27.123355Z","iopub.execute_input":"2024-11-26T17:10:27.123735Z","iopub.status.idle":"2024-11-26T17:10:27.173382Z","shell.execute_reply.started":"2024-11-26T17:10:27.123697Z","shell.execute_reply":"2024-11-26T17:10:27.172417Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = train.drop(['utility_agent1'], axis=1)\ny = train['utility_agent1']\ngroups = group_col\n\nSEED = 42\nn_splits = 5\n\ndef TrainML(model):\n    \n    group_kfold = GroupKFold(n_splits=n_splits)\n    \n    train_rmse_scores = []\n    test_rmse_scores = []\n    trained_models = []\n    \n    for fold, (train_idx, test_idx) in enumerate(tqdm(group_kfold.split(X, y, groups=groups), \n                                                      desc=\"Training Folds\", total=n_splits)):\n        \n        X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n        y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n        \n        model.fit(X_train, y_train)\n        trained_models.append(model)\n        \n        y_train_pred = model.predict(X_train)\n        y_test_pred = model.predict(X_test)\n        \n        train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))\n        test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))\n        \n        train_rmse_scores.append(train_rmse)\n        test_rmse_scores.append(test_rmse)\n        \n        print(f\"Fold {fold+1} - Train RMSE: {train_rmse:.4f}, Test RMSE: {test_rmse:.4f}\")\n        clear_output(wait=True)\n    \n    print(\"\\n--- Final Mean Scores ---\")\n    print(f\"Mean Train RMSE: {np.mean(train_rmse_scores):.4f}\")\n    print(f\"Mean Test RMSE: {np.mean(test_rmse_scores):.4f}\")\n    \n    results_df = pd.DataFrame({\n        'Fold': np.arange(1, n_splits+1),\n        'Train RMSE': train_rmse_scores,\n        'Test RMSE': test_rmse_scores\n    })\n    \n    print(\"\\n=== KFold RMSE Results ===\")\n    print(results_df)\n    \n    return trained_models, model","metadata":{"execution":{"iopub.status.busy":"2024-11-26T17:10:27.174692Z","iopub.execute_input":"2024-11-26T17:10:27.175047Z","iopub.status.idle":"2024-11-26T17:10:27.228825Z","shell.execute_reply.started":"2024-11-26T17:10:27.175007Z","shell.execute_reply":"2024-11-26T17:10:27.228099Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"CatParams1 = {'iterations': 1844, 'learning_rate': 0.058375587542823536, 'depth': 10, 'l2_leaf_reg': 0.000642543780540334,\n       'min_data_in_leaf': 24, 'random_strength': 1.0783250897617306e-07, 'bagging_temperature': 0.042308185479400635,\n       'grow_policy': 'SymmetricTree','bootstrap_type': 'Bayesian', 'eval_metric': 'RMSE'} # 0.4245\n\nLightParams = {'learning_rate': 0.052278310677039956, 'num_leaves': 208, 'n_estimators': 1659, \n       'min_child_samples': 42, 'subsample': 0.7998561811258824, 'colsample_bytree': 0.915664341770982, \n       'reg_alpha': 0.01453093119952141, 'reg_lambda': 0.00014726830932600127, 'scale_pos_weight': 1.455335307825233,\n       'min_split_gain': 1.289977216814962e-06, 'min_child_weight': 0.0012167996364537176} #0.4301\n\nCatParams2 = {'iterations': 2845, 'learning_rate': 0.051370845480815854, 'depth': 10, 'l2_leaf_reg': 0.0035558755451918504, \n       'min_data_in_leaf': 21, 'random_strength': 0.22210088530996994, 'bagging_temperature': 3.5180613566756073e-07, \n       'grow_policy': 'SymmetricTree','bootstrap_type': 'Bayesian', 'eval_metric': 'RMSE'} # 4249\n\nLight = lgb.LGBMRegressor(**LightParams, random_state=SEED, verbose=-1, device='gpu')\nCat = CatBoostRegressor(**CatParams1, random_state=SEED, verbose=0,task_type='GPU')\nCat_n = CatBoostRegressor(**CatParams2, random_state=SEED, verbose=0,task_type='GPU')\n\nestimator = VotingRegressor(\n    estimators=[\n        ('CAT', Cat),\n        ('Light', Light),\n        ('Cat_N', Cat_n)\n    ],\n     weights=[0.7,0.4,0.3]\n)","metadata":{"execution":{"iopub.status.busy":"2024-11-26T17:10:27.229926Z","iopub.execute_input":"2024-11-26T17:10:27.230291Z","iopub.status.idle":"2024-11-26T17:10:27.241174Z","shell.execute_reply.started":"2024-11-26T17:10:27.230247Z","shell.execute_reply":"2024-11-26T17:10:27.240333Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Light_Models = None\ncounter = 0\n\ndef train_model():\n    global Light_Models\n    \n    if Light_Models is None:\n        Light_Models, Light_m = TrainML(estimator)\n\ndef infer_lgb(data, models):\n    return np.mean([model.predict(data) for model in models], axis=0)\n\ndef predict(test, submission):\n    global Light_Models, agent_cols, counter\n    \n    train_model() if counter == 0 else None\n    \n    counter += 1\n    \n    test = select_features(test,features)\n    test = process_agent_cols(test, agent_cols)\n    test = encode_Train(test)\n    \n    return submission.with_columns(pl.Series('utility_agent1', infer_lgb(test, Light_Models)))\n\ninference_server = kaggle_evaluation.mcts_inference_server.MCTSInferenceServer(predict)\nif os.getenv('KAGGLE_IS_COMPETITION_RERUN'):\n    inference_server.serve()\nelse:\n    inference_server.run_local_gateway(\n        (\n            '/kaggle/input/um-game-playing-strength-of-mcts-variants/test.csv',\n            '/kaggle/input/um-game-playing-strength-of-mcts-variants/sample_submission.csv'\n        )\n    )","metadata":{"execution":{"iopub.status.busy":"2024-11-26T17:10:27.242216Z","iopub.execute_input":"2024-11-26T17:10:27.242512Z","iopub.status.idle":"2024-11-26T17:26:34.064085Z","shell.execute_reply.started":"2024-11-26T17:10:27.242474Z","shell.execute_reply":"2024-11-26T17:26:34.063162Z"},"trusted":true},"outputs":[],"execution_count":null}]}